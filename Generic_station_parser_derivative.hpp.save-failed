#pragma once

#include <fstream>
#include <vector>
#include <sstream>
#include <cstdlib>
#include <algorithm>
#include <set>

#include "Generic_mapper.hpp"
#include "Generic_connection_parser.hpp"
using namespace travel;



namespace travel {

    class Generic_station_parser_derivative : public Generic_mapper {
    public:
        std::vector<std::pair<uint64_t, uint64_t>> compute_travel(uint64_t _start, uint64_t _end) override;
        //std::vector<std::pair<uint64_t, uint64_t>> compute_and_display_travel(uint64_t _start, uint64_t _end) override;

//        std::vector<std::pair<uint64_t, uint64_t>> compute_travel(const std::string&, const std::string&) override;
//        std::vector<std::pair<uint64_t, uint64_t>> compute_and_display_travel(const std::string& _start, const std::string& _end) override;

        void read_connections(const std::string& _filename) override;
        void read_stations(const std::string& _filename) override;

    };


    void Generic_station_parser_derivative::read_stations(const std::string& _filename) {
        std::string name_file(_filename);
        std::ifstream in(name_file.c_str());

        if (in.fail())
            std::cerr << "ERROR : Unable to read the file " << std::endl;
        else {
            // On ne prent pas en compte la 1ère ligne
            std::string row; std::getline(in, row, '\n');
            travel::Station station;
            while (!in.eof()) {  //in.good()
                std::getline(in, station.name, ',');
                std::getline(in, station.line_id, ',');
                std::getline(in, station.address, ',');
                std::getline(in, station.line_name, '\n');
                this->stations_hashmap.insert(std::make_pair(stoi(station.line_id), station));
            }
        } in.close();

        /// Affichage des -- station--
        for(auto const& it : this->stations_hashmap) {
            std::cout << it.first << " : " << it.second << std::endl;
        }

    }


    void Generic_station_parser_derivative::read_connections(const std::string& _filename) {
        std::string name_file(_filename);
        std::ifstream in(name_file.c_str());

        std::string from_stop_id;
        std::string to_stop_id;
        std::string min_transfer_time;

        if (in.fail())
            std::cerr << "ERROR : Unable to read the file " << std::endl;
        else {
            // On ne prend pas en compte la 1ère ligne
            std::string row; std::getline(in, row,  '\n');
            while (!in.eof()) { // in.good()
                std::getline(in, from_stop_id, ',');
                std::getline(in, to_stop_id, ',');
                std::getline(in, min_transfer_time, '\n');

                uint64_t from_stop_id_int =  std::strtoul(from_stop_id.c_str(), NULL, 10);
                uint64_t to_stop_id_int = std::strtoul(to_stop_id.c_str(), NULL, 10);
                uint64_t min_transfer_time_int = std::strtoul(min_transfer_time.c_str(), NULL, 10);

                if (connections_hashmap.count(from_stop_id_int)) {
                    this->connections_hashmap.at(from_stop_id_int)[to_stop_id_int] = min_transfer_time_int;
                }
                // Create one if it doesn't
                else {
                    std::unordered_map<uint64_t,uint64_t> temp_hashmap;
                    temp_hashmap[to_stop_id_int] = min_transfer_time_int;
                    this->connections_hashmap[from_stop_id_int] = temp_hashmap;
                }
            }
        } in.close();

        /// Affichage des -- affichage des conections --
        for (auto IT : this->connections_hashmap)
        {
            std::cout << "ID1 : " << IT.first << ", ";
            for (auto ITB : IT.second)
            {
                std::cout << "ID2 : " << ITB.first << ", TIME : " << ITB.second << std::endl;
            }
        }
    }


    std::vector<std::pair<uint64_t, uint64_t> > Generic_station_parser_derivative::compute_travel(uint64_t _start, uint64_t _end) {
        std::vector<std::pair<uint64_t, uint64_t> > chemins;
        const uint64_t INF = 999999;

        // Créer un set pour stocker les sommets qui sont en cours de traitement.
        std::set<std::pair<uint64_t, uint64_t> > setds;

        // Crée un "unordred_map" pour les distances et initialise toutes les
        // distances comme infinies (INF)
        std::unordered_map<uint64_t, uint64_t> dist;
        for(auto const& station : this->stations_hashmap) {
            dist[station.first] = INF;
        }

        // Insérer la source elle-même dans le Set et initialiser sa
        // distance à 0.
        setds.insert(std::make_pair(0, _start));
        dist[_start] = 0;

        /* Boucle jusqu'à ce que toutes les distances les plus courtes soient finalisées.
           alors les setds deviendront vides */
        while (!setds.empty())
        {
            // Le premier sommet de l'ensemble est la distance minimale.
            // vertex, extrayez-le de l'ensemble.
            std::pair<int, int> tmp = *(setds.begin());
            setds.erase(setds.begin());

            // l'étiquette du sommet est stockée dans le deuxième élément de la paire (cela
            // doit être fait de cette façon pour que les sommets restent triés
            // distance (la distance doit être le premier élément de la paire).
            // de la paire)
            int u = tmp.second;

            // 'i' est utilisé pour obtenir tous les sommets adjacents d'un sommet.
            std::unordered_map<int, int>::iterator i;
//            for (i = this->connections_hashmap[u].begin(); i != this->connections_hashmap[u].end(); ++i)
            for (auto const& i : this->connections_hashmap[u])
            {
                // Obtenir l'étiquette du sommet et le poids de l'adjacent actuel
                // de u.
                int v = i.first;
                int weight = i.second;

                // S'il existe un chemin plus court vers v en passant par u.
                if (dist[v] > dist[u] + weight)
                {
                  /* Si la distance de v n'est pas INF alors elle doit être dans
                        notre ensemble, alors on le supprime et on l'insère à nouveau
                        avec une distance moindre mise à jour.
                        Note : Nous n'extrayons que les sommets de l'ensemble
                        pour lesquels la distance est finalisée. Donc pour eux,
                        nous n'arriverons jamais ici.  */
                    if (dist[v] != INF)
                        setds.erase(setds.find(std::make_pair(dist[v], v)));

                    // Mise à jour de la distance de v
                    dist[v] = dist[u] + weight;
                    setds.insert(std::make_pair(dist[v], v));
                }
            }
        }

        // Imprimer les distances les plus courtes stockées dans dist[]
        printf("Vertex   Distance from Source\n");
        for (auto const& d : dist)
            printf("%d \t\t %d\n", d.first, d.second);

        return v;
    }




//    std::vector<std::pair<uint64_t,uint64_t> > compute_travel(uint64_t _start, uint64_t _end){
//
//    // ============================================================= //
//    // =================== DECLARING VARIABLES ===================== //
//    // ============================================================= //
//
//    /*  Cette variable sera utilisée pour initiaiser les distances des toutes les stations
//     *  par rapport à la station source
//     */
//    uint64_t const INF = 999999;
//
//
//    /*  De préférance est de travailler avec une référence constante de "connections_hashmap"
//     *  pour evité de modifier son comptenu. pour ce fair on va utiliser la méthode get_connection_hashmap()
//     */
//    std::unordered_map<uint64_t,std::unordered_map<uint64_t,uint64_t>> connections_hashmap = get_connections_hashmap();
//
//    /* a revoire !
//     *
//     */
//    // Stations hashmap
//    // Key is stationid, value is stationid preceding the said station
//    std::unordered_map<uint64_t, uint64_t> stations_pre;
//
//    // Vector of pairs for distances from source.
//    // First value of a pair is the station, second is the distance from source
//    std::unordered_map<uint64_t, uint64_t> distance_from_source;
//
//    // Visited stations, starts with only source node
//    // First part of pair is stationid, second is stationid preceding the said station
//    std::vector<uint64_t> visited;
//    visited.emplace_back(_start);
//
//    // Stations unvisited
//    std::vector<uint64_t> unvisited;
//
//    // ============================================================= //
//    // ================= INITIALIZING VARIABLES ==================== //
//    // ============================================================= //
//
//    // distance_from_source, and unvisited
//    std::unordered_map<uint64_t, Station> map = get_stations_hashmap();
//    for (auto const&m : map){
//
//        uint64_t station_id = m.first;
//
//        // distance_from_source
//        // if station_id is _start(source)
//        if (station_id == _start){
//            distance_from_source[station_id] = 0;
//        }
//
//        else{
//
//            distance_from_source[station_id] = BIG_INT;
//        }
//
//        // unvisited
//        unvisited.emplace_back(station_id);
//    }
//
//    // ============================================================= //
//    // ====================== ALGORITHM LOOP ======================= //
//    // ============================================================= //
//
//    bool found_end = false;
//
//    while(unvisited.size() == 0 or !found_end){
//
//        // Find shortest current path
//        uint64_t min_distance = BIG_INT;
//        uint64_t current_station;
//
//        // Find the shortest distance to source from all unvisited nodes
//        // and the index of its node
//        for (int i = 0; i < (int)unvisited.size(); i++){
//
//            uint64_t station = unvisited[i];
//            uint64_t dist = distance_from_source.at(station);
//
//            if (dist < min_distance){
//                min_distance = dist;
//                current_station = station;
//            }
//
//        }
//
//        // If we find the last station
//        if (current_station == _end){
//            found_end = true;
//        }
//
//        // Add current station to visited stations
//        visited.emplace_back(current_station);
//
//        // Remove it from unvisited
//        auto it = std::find(unvisited.begin(), unvisited.end(), current_station);
//        unvisited.erase(it);
//
//
//        // Calculate all distance_from_source of the stations connected to current station
//        std::unordered_map<uint64_t,uint64_t> current_connections = connections_hashmap.at(current_station);
//        for (auto const &s : current_connections){
//
//            // The distance from source is the distance of the current station from source + the distance
//            // between the station and its connection.
//            uint64_t dist = distance_from_source.at(current_station) + s.second;
//
//            if (distance_from_source.at(s.first) > dist){
//                distance_from_source[s.first] = dist;
//                stations_pre[s.first] = current_station;
//            }
//
//        }
//
//
//    }   // end of while
//
//    // ============================================================= //
//    // ====================== SHORTEST PATH ======================== //
//    // ============================================================= //
//
//
//    std::vector<std::pair<uint64_t,uint64_t> > path;
//
//    // Fill shortest path vector with <station, time_from_source> pairs
//    uint64_t current_station = _end;
//    while(current_station != _start){
//
//        std::pair<uint64_t,uint64_t> station_dist;
//        // station_id
//        station_dist.first = current_station;
//        // time
//        station_dist.second = distance_from_source.at(current_station);
//
//
//        // current station becomes the station preceding it
//        current_station = stations_pre.at(current_station);
//
//
//        path.emplace_back(station_dist);
//    }
//
//    // reverse the path so vector starts from the first station
//    std::reverse(path.begin(), path.end());
//
//
//    return path;
//
//}


//    std::vector<std::pair<uint64_t, uint64_t> > Generic_station_parser_derivative::compute_travel(const std::string& _start, const std::string& _end) {
//        std::vector<std::pair<uint64_t, uint64_t> > v; return v;
//    }
//    std::vector<std::pair<uint64_t, uint64_t> > Generic_station_parser_derivative::compute_and_display_travel(const std::string& _start, const std::string& _end) {
//        std::vector<std::pair<uint64_t, uint64_t> > v; return v;
//    }
}
